from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np
import joblib
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets ---
scope = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file(
    "../venv/citizen-requests-476714-da2e73c20db3.json", scopes=scope
)
client = gspread.authorize(creds)
SHEET_ID = "1v3MMitqxBkEGqilOsRh_RouepCUN15JHKIvsyK7OrTU"
sheet = client.open_by_key(SHEET_ID).sheet1

# --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets ---
def add_to_google_sheets(text, category, probs_dict):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    probs_values = [f"{probs_dict.get(label, 0):.2f}%" for label in label_encoder.classes_]
    new_row = [timestamp, text, category] + probs_values
    sheet.append_row(new_row, value_input_option="USER_ENTERED")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ ---
user_private_router = Router()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ---
model = load_model("../venv/best_model.h5")
tokenizer = joblib.load("../venv/best_tokens.pkl")
label_encoder = joblib.load("../venv/best_labels.pkl")

max_len = 100

# --- –§—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ ---
def classify_text_with_probs(text: str):
    seq = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=max_len)
    probs = model.predict(seq)[0]
    top_idx = np.argmax(probs)
    top_label = label_encoder.inverse_transform([top_idx])[0]
    probs_dict = dict(zip(label_encoder.classes_, np.round(probs * 100, 2)))
    return top_label, probs_dict


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏—ë–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –∏ –∑–∞–Ω–µ—Å—É –≤ –±–∞–∑—É (Google Sheets).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /menu ---
@user_private_router.message(Command("menu"))
async def menu_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="request")],
            [InlineKeyboardButton(text="üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="latest")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ", callback_data="about")],
        ]
    )
    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
        reply_markup=keyboard,
    )


# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π ---
async def show_latest_entries(message: types.Message):
    try:
        records = sheet.get_all_values()

        if len(records) <= 1:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return

        data = records[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        latest = data[-5:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫

        text_lines = []
        for r in latest:
            timestamp = r[0] if len(r) > 0 else "‚Äî"
            text = r[1] if len(r) > 1 else "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)"
            category = r[2] if len(r) > 2 else "(–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)"
            text_lines.append(f"üïí <b>{timestamp}</b>\nüìÑ {text}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_latest")],
                [InlineKeyboardButton(
                    text="üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É",
                    url=f"https://docs.google.com/spreadsheets/d/{SHEET_ID}"
                )]
            ]
        )

        await message.answer(
            "üßæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n" + "\n\n".join(text_lines),
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /latest ---
@user_private_router.message(Command("latest"))
async def latest_cmd(message: types.Message):
    await show_latest_entries(message)


# --- Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
@user_private_router.callback_query(lambda c: c.data == "refresh_latest")
async def refresh_latest_callback(callback: types.CallbackQuery):
    await show_latest_entries(callback.message)
    await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")


# --- Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ¬ª ---
@user_private_router.callback_query(lambda c: c.data == "request")
async def request_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –≤ –±–∞–∑—É."
    )
    await callback.answer()


# --- Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–û —Å–∏—Å—Ç–µ–º–µ¬ª ---
@user_private_router.callback_query(lambda c: c.data == "about")
async def about_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º:\n\n"
        "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω\n"
        "‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (ML)\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ /latest",
        parse_mode="HTML",
    )
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π ---
@user_private_router.message()
async def handle_message(message: types.Message):
    user_text = message.text.strip()
    if not user_text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è.")
        return

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    category, probs_dict = classify_text_with_probs(user_text)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    add_to_google_sheets(user_text, category, probs_dict)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n"
        "üìä –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /latest.",
        parse_mode="HTML",
    )
